#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

case ARGV[0]
when '-v', '--version'
  out("#{me} v0.4.0")
when '-h', '--help'
  out(<<~HELP)
    Usage: #{me} [<dir>]
      Print all commands and their abbreviations found in <dir>.
      If <dir> is omitted, '~/bin' is used.

    Usage: #{me} -f|--find|-l|--long <name> [<dir>]
      Print command matching <name> in <dir>.
      If <dir> is omitted, '~/bin' is used.
      If -l or --long is given, the full path to the command is printed.

    Usage: #{me} -v|--version
      Print version information.

    Usage: #{me} -h|--help
      Print this help information.
  HELP
when nil
  arg_path = '~/bin'
when '-f', '--find', '-l', '--long'
  arg_name = ARGV[1] || die!('<name> missing')
  arg_path = ARGV[2] || '~/bin'
  opt_long = ARGV[0].include?('l')
  die!('too many arguments') if ARGV.size > 2
else
  die!("unknown option - #{ARGV[0]}") if ARGV[0][0] == '-'
  die!('too many arguments') if ARGV.size != 1
  arg_path = ARGV[0]
end

BEGIN {
  def me = File.basename(Process.argv0)
  def out(msg) = (puts(msg) or exit)
  def die!(msg, code: 1) = ($stderr.puts("#{me}: #{msg}") or exit(code))
}

IO.pipe do |in_read, in_write|
  if arg_name
    IO.popen(
      "word-abbrev '#{arg_name}'",
      in: in_read,
      err: %i[child out]
    ) do |stream|
      fmap = {}
      Dir.glob("#{File.expand_path(arg_path)}/*") do |fname|
        next unless File.executable_real?(fname)
        name = File.basename(fname, '.*')
        fmap[name] = fname
        in_write.puts(name)
      end
      in_write.close
      found = stream.readline(chomp: true)
      out(opt_long ? fmap[found] : found)
    rescue EOFError
      exit(1)
    end
  end

  IO.popen('word-abbrev', in: in_read, err: %i[child out]) do |stream|
    Dir.glob("#{File.expand_path(arg_path)}/*") do |fname|
      next unless File.executable_real?(fname)
      in_write.puts(File.basename(fname, '.*'))
    end
    in_write.close
    IO.copy_stream(stream, $stdout)
  end
rescue Errno::ENOENT
  die!('command not found - word-abbrev', code: 2)
end
