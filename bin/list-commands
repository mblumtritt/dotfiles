#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

ME = File.basename(Process.argv0)
PEX = ->(*msg) { puts(*msg) or exit }
PEX["#{ME} v0.2.1"] if %w[-v --version].include?(ARGV[0])
PEX[<<~HELP] if %w[-h --help].include?(ARGV[0])
  Usage: #{ME} [-l|--long] [<name>] [<dir>]

  Find commands matching <name> in <dir> and print them to stdout.
  If <dir> is omitted, '~/bin' is used.
  If -l or --long is given, the full path to the command is printed.
HELP

LONG = ARGV.delete('-l') || ARGV.delete('--long')
ERR = ->(msg) { $stderr.puts("#{ME}: #{msg}") or exit(1) }
ERR['too many arguments'] if ARGV.size > 2
NAME = ARGV[0]
DIRNAME = File.expand_path(ARGV[1] || '~/bin')
ERR["no such directory - #{DIRNAME}"] unless File.directory?(DIRNAME)
CMDS =
  Hash[
    Dir["#{DIRNAME}/*"]
      .keep_if { |fname| File.executable_real?(fname) }
      .map! { |fname| [File.basename(fname, '.*'), fname] }
  ]

PEX[*(LONG ? CMDS.values : CMDS.keys)] if NAME.nil?
PEX[CMDS[NAME]] if CMDS.key?(NAME)

def find(str, words)
  found = []
  each_pat(str) { |pat| found += words.find_all { |w| pat.match?(w) } }
  return if found.empty?
  found.uniq!
  grouped = found.group_by { |w| w.count('-') }
  grouped.transform_values!(&:sort!)
  sizes = grouped.keys.sort!
  min = grouped[sizes[0]]
  min.size == 1 ? min[0] : sizes.map! { |c| grouped[c] }.flatten
end

def each_pat(str)
  matrix(str)
    .sort do |a, b|
      next b.map(&:size) <=> a.map(&:size) if a.size == b.size
      ret = b.max_by(&:size).size <=> a.max_by(&:size).size
      ret.zero? ? a.size <=> b.size : ret
    end
    .tap { |m| m.pop if m.size > 1 }
    .each do |e|
      yield(Regexp.new("^#{e.map { |s| "#{Regexp.escape(s)}\\w*" }.join('-')}"))
    end
end

def matrix(str, ic = false)
  return to_enum(__method__, str) unless block_given?
  return if str.empty?
  yield([str])
  return if str.size == 1
  1.upto(str.size - 1) do |i|
    left = str[0, i]
    right = str[i, str.size - i]
    matrix(right, true) { |ary| yield(ary.unshift(left)) }
  end
  yield(str.chars) unless ic
end

FOUND = find(NAME, CMDS.keys) || exit
puts(*(LONG ? CMDS.values_at(*FOUND) : FOUND))
