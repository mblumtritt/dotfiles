#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

out("#{me} v0.4.0") if %w[-v --version].include?(ARGV[0])
out(<<~HELP) if %w[-h --help].include?(ARGV[0])
  Usage: #{me}
    Print all project directories and their abbrevations.

  Usage: #{me} <name>
    Print project directory matching <name>.

  Usage: #{me} -v|--version
    Print version information.

  Usage: #{me} -h|--help
    Print this help information.
HELP

BEGIN {
  def me = File.basename(Process.argv0)
  def out(msg) = (puts(msg) or exit)
}
def die!(msg, code: 1) = ($stderr.puts("#{me}: #{msg}") or exit(code))
die!('too many arguments') if ARGV.size > 1

def with_word_abbrev(input, arg = nil)
  arg = " '#{arg}'" if arg
  IO.pipe do |in_read, in_write|
    IO.popen("word-abbrev#{arg}", in: in_read, err: %i[child out]) do |stream|
      in_write.puts(input)
      in_write.close
      yield(stream)
    end
  rescue Errno::ENOENT
    die!('command not found - word-abbrev', code: 2)
  end
end

projects =
  begin
    ret = {}
    prj_dir = "#{File.expand_path('~/prj')}/"
    Dir.glob("#{prj_dir}*") do |tdir|
      next unless File.directory?(tdir)
      Dir.glob("#{tdir}/*") do |sdir|
        next unless File.directory?(sdir)
        short = sdir.delete_prefix(prj_dir).tr('/', '-')
        ret[short] = sdir unless short.include?('--')
      end
    end
    ret
  end

if ARGV.empty?
  with_word_abbrev(projects.keys) { |stream| IO.copy_stream(stream, $stdout) }
else
  with_word_abbrev(projects.keys, ARGV[0]) do |stream|
    out(projects[stream.readline(chomp: true)])
  rescue EOFError
    exit(1)
  end
end
