#!/usr/bin/env ruby
# frozen_string_literal: true

if ARGV.include?('-h') || ARGV.include?('--help')
  puts <<~HELP
    Usage: list-projects [<options>] <name>

    Options:
      -h, --help  show this help
      -t, --top   print first matching project only

    List all projects matching NAME shortcut.
  HELP
  exit
end

def error(msg, code)
  $stderr.puts("list-projects: #{msg}")
  exit(code)
end

TOP = ARGV.delete('-t') || ARGV.delete('--top')
NAME = ARGV.first or error('argument <name> missing', 2)

def read_roots(file_name = '~/.list-projects')
  IO
    .readlines(File.expand_path(file_name))
    .map!(&:strip)
    .delete_if { |name| name.nil? || name.empty? || name.start_with?('#') }
rescue SystemCallError
  error("configuration not found - #{file_name}", 3)
end

class ProjectsFinder
  def initialize(roots)
    @roots, @map = roots, nil
  end

  def map
    @map ||= create_map
  end

  def related_dirs(name)
    dirs_for(related_keys(name))
  end

  private

  def normalized(str)
    str.downcase.tr('-._', '')
  end

  def related_keys(name)
    name = normalized(name)
    map
      .keys
      .find_all { |key| key.index(name) }
      .sort_by! { |key| key.size - name.size }
  end

  def dirs_for(keys)
    ret = []
    keys.each { |key| ret << map[key] }
    ret.flatten!
    ret.uniq!
    ret
  end

  def create_map
    ret = Hash.new { |h, k| h[k] = [] }
    @roots.each do |root|
      root = File.expand_path(root)
      next unless File.directory?(root)
      Dir.glob(root + '/*') do |file_name|
        next unless File.directory?(file_name)
        name = normalized(File.basename(file_name))
        ret[name] << file_name
      end
    end
    ret
  end
end

FOUND = ProjectsFinder.new(read_roots).related_dirs(NAME)
exit(1) if FOUND.empty?
TOP ? puts(FOUND.first) : FOUND.each { |f| puts f }
