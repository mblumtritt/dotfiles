#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

def me = File.basename(Process.argv0)
def die!(msg, code: 1) = ($stderr.puts("#{me}: #{msg}") or exit(code))
arg_list = nil

case ARGV[0]
when '-v', '--version'
  puts("#{me} v0.4.1")
  exit
when '-h', '--help'
  puts(<<~HELP)
    Usage: #{me} [-a|--abbrev]
      Print all project directories and their abbrevations.

    Usage: #{me} <name>
      Print project directory matching <name>.

    Usage: #{me} -v|--version
      Print version information.

    Usage: #{me} -h|--help
      Print this help information.
  HELP
  exit
when '-a', '--abbrev'
  arg_list = '-ls'
  ARGV.shift
end

die!('too many arguments') if ARGV.size > 1

projects = {}
prj_dir = File.expand_path('~/prj') + '/'
Dir.glob("#{prj_dir}*") do |tdir|
  next unless File.directory?(tdir)
  Dir.glob(tdir + '/*') do |sdir|
    next unless File.directory?(sdir)
    short = sdir.delete_prefix(prj_dir).tr('/', '-')
    projects[short] = sdir unless short.include?('--')
  end
end

def with_word_abbrev(input, arg)
  arg = " '#{arg}'" if arg
  IO.pipe do |in_read, in_write|
    IO.popen("shorten-words#{arg}", in: in_read, err: %i[child out]) do |stream|
      in_write.puts(input)
      in_write.close
      yield(stream)
    end
  rescue Errno::ENOENT
    die!('command not found - shorten-words', code: 2)
  end
end

if ARGV.empty?
  with_word_abbrev(projects.keys, arg_list) do |stream|
    IO.copy_stream(stream, $stdout)
  end
  exit
end

with_word_abbrev(projects.keys, ARGV[0]) do |stream|
  puts(projects[stream.readline(chomp: true)])
rescue EOFError
  exit(1)
end
