#! /usr/bin/env ruby
# frozen_string_literal: true

BIN_DIR = File.expand_path('~/.usr/bin')

def valid_command?(fname)
  File.file?(fname) && File.executable_real?(fname)
end

def help
  puts(
    "usage: #{File.basename(__FILE__)} <command> [options]",
    nil,
    'valid commands:'
  )
  Dir.glob(File.join(BIN_DIR, '*')).sort!.each do |cmd|
    puts('  ' + File.basename(cmd)) if valid_command?(cmd)
  end
  exit
end

def help?(str)
  str == 'help' || str == 'h' || str == '-h' || str == '--help'
end

def which?(str)
  str == 'which' || str == 'w' || str == '-w' || str == '--which'
end

command = ARGV.shift
help if command.nil? || (ARGV.empty? && help?(command))

def matrix_for(str)
  [
    [str[0, 4]],
    [str[0, 3], str[3]],
    [str[0], str[1, 3]],
    [str[0, 2], str[2, 2]],
    [str[0, 2], str[2], str[3]],
    [str[0], str[1, 2], str[3]],
    [str[0], str[1], str[2], str[3]],
    [str[0], str[1], str[2, 2]]
  ].each do |ary|
    ary.delete_if{ |e| e.nil? || e.empty? }
  end.uniq
end

def best_matching_command(str)
  guess = File.join(BIN_DIR, str)
  return guess if valid_command?(guess)
  maybe = []
  matrix_for(str).each do |ary|
    guess = Dir.glob(File.join(BIN_DIR, ary.join('*-') + '*'))
    guess.delete_if{ |s| s.count('-') > ary.size || !valid_command?(s) }
    next if guess.empty?
    return guess[0] if guess.size == 1
    maybe += guess
  end
  maybe.uniq!
  return nil if maybe.empty?
  1.upto(3) do |i|
    shortest = maybe.select{ |name| File.basename(name).count('-') == i }
    return shortest[0] if shortest.size == 1
  end
  maybe.sort!
end

def no_such_command(cmd)
  $stderr.puts("no such command - #{cmd}")
  exit!
end

def non_bijective_command(cmd, alternatives, out)
  $stderr.puts("non-bijective command - #{cmd}")
  out.puts('did you mean:')
  alternatives.each{ |cmd| out.puts('  ' + File.basename(cmd)) }
  exit!
end

def find_command(str, out = $stdout)
  found = best_matching_command(str)
  no_such_command(str) if found.nil?
  non_bijective_command(str, found, out) if Array === found
  found
end

def which(str)
  puts(find_command(str, $stderr))
  exit
end

if ARGV.size == 1
  which(ARGV[0]) if which?(command)
  exec(find_command(ARGV[0]), '--help') if help?(command)
end

exec(find_command(command), *ARGV)
