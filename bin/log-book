#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

VERSION = '0.4.0'
NAME = File.basename(Process.argv0).freeze
HELP = <<~HELP.freeze
  #{NAME} [-t|--topic <topic>] [<message>]
      Log a <message> or all stdin lines to a given <topic>.
  #{NAME} -l|--list [<glob>]
      List <glob> matching or all topics.
  #{NAME} -p|--print [-t|--topic <topic>] [<pattern>]
  #{NAME} -p|--print [-t|--topic <topic>] [--time <time>] [<pattern>]
  #{NAME} -p|--print [-t|--topic <topic>] [--after <time>] [--before <time>] [<pattern>]
      Find all entries of a <topic> matching given <pattern>.
      The <pattern> can be a simple sub-string or a regular expression when
      enclosed in slashes ('/').
      A time or time range can be specified with this formatting:
        '4:20'              today at 4:20h
        'may 06'            May 6th this year
        'may 06 14:30'      May 6th this year at 14:30h
        '2022'              year 2022
        '2022/3'            March 2022
        '2022/3/14'         March 14th of year 2022
        '2022-03-14 14:30'  March 14th of year 2022 at 14:30h
  #{NAME} -h | --help
      Print help information.
  #{NAME} -v | --version
      Print version information.
HELP

trap(2) { exit(138) }
def pex(msg, out: $stdout, code: 0) = (out.puts(msg) or exit(code))
def die!(msg, code: 1) = pex("#{NAME}: #{msg}", code:, out: $stderr)

COMMAND =
  case ARGV[0]
  when '-h', '--help'
    pex(HELP)
  when '-v', '--version'
    pex("#{NAME} v#{VERSION}")
  when '-l', '--list'
    ARGV.shift
    'list'
  when '-p', '--print'
    ARGV.shift
    'print'
  when '-t', '--topic'
    ARGV.shift and (topic = ARGV.shift or die!('argument missing - <topic>'))
    'add'
  else
    'add'
  end

ROOT = File.expand_path(ENV['LB_DIR'] || '~/.local/logs').freeze

def file?(fname)
  stat = File.stat(fname) and stat.file? && stat.readable?
rescue SystemCallError
  false
end

if COMMAND == 'list'
  Dir.glob(File.join(ROOT, "#{ARGV[0] || '*'}.log"), sort: true) do |name|
    puts(File.basename(name, '.log')) if file?(name)
  end
  exit
end

def mkdir_for(fname)
  path = File.dirname(fname)
  stack = []
  until File.directory?(path)
    stack << path
    path = File.dirname(path)
  end
  stack.reverse_each do |name|
    Dir.mkdir(name)
  rescue SystemCallError
    File.directory?(name) or die("unable to create path - #{name}", code: 3)
  end
  nil
end

def flags(fname, mode)
  return File::SYNC | File::BINARY | File::RDONLY if mode != :write
  flags = File::SYNC | File::BINARY | File::WRONLY
  File.exist?(fname) ? flags | File::APPEND : flags | File::CREAT | File::EXCL
end

def with_file(fname, mode)
  mkdir_for(fname)
  File.open(fname, flags(fname, mode)) do |file|
    file.flock(mode == :write ? File::LOCK_EX : File::LOCK_SH)
    yield(file)
  end
rescue SystemCallError
  die!("unable to #{mode} file - #{fname}", code: 3)
end

def fname(topic)
  File.join(ROOT, "#{topic || ENV['LB_TOPIC'] || 'default'}.log")
end

if COMMAND == 'add'
  with_file(fname(topic), :write) do |file|
    out =
      proc do |m|
        file.puts("[#{Time.now.utc.strftime('%FT%T')}] #{m.tr("\r\n", ' ')}")
      end
    out[ARGV.join(' ')] unless ARGV.empty?
    if ARGV.empty? || File.pipe?($stdin)
      $stdin.each_line(chomp: true) { out[_1] }
    end
  end
  exit
end

def as_time(str, name)
  die!("argument missing - <#{name}>") unless str
  require('date_core') unless defined?(Date)
  tm = Date._parse(str)
  tk = tm.keys.sort!
  return format('[%<year>04d-%<mon>02d-', **tm) if tk == %i[mon year]
  if tk == %i[mday mon year]
    return format('[%<year>04d-%<mon>02d-%<mday>02dT', **tm)
  end
  now = Time.now.utc
  if tk == %i[mday mon]
    return format('[%<mon>02d%<mday>02d-', **tm) if tm[:mon] > 12
    return format('[%<year>04d-%<mon>02d-%<mday>02dT', **tm, year: now.year)
  end
  Time.utc(
    tm[:year] || now.year,
    tm[:mon] || now.mon,
    tm[:mday] || now.mday,
    tm[:hour],
    tm[:min]
  ).strftime('[%FT%H:%M:')
rescue ArgumentError, TypeError
  die!("invalid time format for <#{name}> - #{str}")
end

topic = before = after = time = nil
until ARGV.empty?
  case ARGV[0]
  when '-t', '--topic'
    (ARGV.shift and topic = ARGV.shift) or die!('argument missing - <topic>')
  when '--time'
    die!('invalid option - --time') if before || after
    ARGV.shift and time = as_time(ARGV.shift, 'time')
  when '--before'
    die!('invalid option - --before') if time
    ARGV.shift and before = as_time(ARGV.shift, 'before')
  when '--after'
    die!('invalid option - --after') if time
    ARGV.shift and after = as_time(ARGV.shift, 'after')
  else
    break
  end
end

exit unless file?(FNAME = fname(topic))

PRINTER =
  begin
    if (str = ARGV.join(' ')).empty?
      proc { print(_1) }
    elsif str.start_with?('/') && str.end_with?('/')
      str =
        Regexp.new(
          str.delete_prefix('/').delete_suffix!('/'),
          Regexp::IGNORECASE
        )
      proc { print(_1) if str.match?(_1) }
    else
      proc { print(_1) if _1.index(str) }
    end
  rescue RegexpError => e
    die!("invalid regular expression - #{e}")
  end

def show_matching_before(file, time)
  len = time.size
  file.each_line do |line|
    break if line[0, len] >= time
    PRINTER[line]
  end
end

with_file(FNAME, :read) do |file|
  if time
    len = time.size
    file.each_line do |line|
      break if (tm = line[0, len]) > time
      PRINTER[line] if tm == time
    end
  elsif after
    len = after.size
    if before
      len_bef = before.size
      file.each_line do |line|
        next if line[0, len] <= after
        exit if line[0, len_bef] >= before
        PRINTER[line]
        break
      end
      show_matching_before(file, before)
    else
      file.each_line { |line| PRINTER[line] if line[0, len] > after }
    end
  elsif before
    show_matching_before(file, before)
  else
    file.each_line(&PRINTER)
  end
end
