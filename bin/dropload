#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

Process.setproctitle('DROPLOAD')

def abort(msg)
  $stderr.puts("DROPLOAD: #{msg}")
  exit(1)
end

[
  DOWNLOAD_DIR = File.expand_path('~/Downloads'),
  AUDIO_DROP_DIR = File.expand_path('~/Desktop/audio'),
  VIDEO_DROP_DIR = File.expand_path('~/Desktop/video')
].each do |dirname|
  abort("dir not found - #{dirname}") unless File.directory?(dirname)
end

def extract_url(webloc_file)
  content = File.binread(webloc_file)
  idx = content.index('<string>http')
  if idx
    edx = content.index('</string>', idx + 13) or return
    idx += 8
    return content[idx, edx - idx].strip
  end
  idx = content.index('http') or return
  edx = idx + 5
  edx = content.index("\b", edx) || content.index("\0", edx) or return
  content[idx, edx - idx]
rescue SystemCallError
  nil
end

def as_url_map(dirname)
  Dir
    .glob("#{dirname}/*.webloc")
    .filter_map do |fname|
      url = extract_url(fname) or next
      [fname, url]
    end
    .to_h
end

audio_urls = as_url_map(AUDIO_DROP_DIR)
video_urls = as_url_map(VIDEO_DROP_DIR)
url_count = audio_urls.size + video_urls.size
abort('nothing found') if url_count.zero?
puts "DROPLOAD: #{url_count} URL"

def execute(cmd, log_name)
  File.open(log_name, 'w') do |log|
    Dir.chdir(DOWNLOAD_DIR) do
      IO.popen(cmd, err: %i[child out]) { |stream| IO.copy_stream(stream, log) }
      return Process.last_status&.success?
    end
  rescue SystemCallError => e
    log.puts(e)
  end
end

def download_all(kind, map)
  map.each_pair do |fname, url|
    next unless fork
    Process.setproctitle("DROPLOAD//#{kind}: #{File.basename(fname)}")
    lname = "#{fname}.log"
    next unless execute(%W[download-#{kind} #{url}], lname)
    File.unlink(fname)
    File.unlink(lname)
  end
end

download_all('audio', audio_urls) unless audio_urls.empty?
download_all('video', video_urls) unless video_urls.empty?
