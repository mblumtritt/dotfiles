#! /usr/bin/env ruby
# frozen_string_literal: true

require 'mini-cli'
include MiniCLI

help <<-HELP, 'NAME'
  -t, --top   display first matching project only

Display all projects matching NAME shortcut.
HELP

main do |args|
  found = ProjectsFinder.new(read_roots).related_dirs(args['NAME'])
  exit(1) if found.empty?
  args.key?('top') ? puts(found[0]) : found.each{ |f| puts f }
end

def read_roots(file_name = '~/.' + name)
  IO
    .readlines(File.expand_path(file_name))
    .map!(&:strip)
    .delete_if{ |name| name.nil? || name.empty? || name.start_with?('#') }
rescue SystemCallError
  error(3, "#{NAME}: configuration not found - #{file_name}")
end

class ProjectsFinder
  def initialize(roots)
    @roots, @map = roots, nil
  end

  def map
    @map ||= create_map
  end

  def related_dirs(name)
    dirs_for(related_keys(name))
  end

  private

  def normalized(str)
    str.downcase.tr('-._', '')
  end

  def related_keys(name)
    name = normalized(name)
    map
      .keys
      .find_all{ |key| key.index(name) }
      .sort_by!{ |key| key.size - name.size }
  end

  def dirs_for(keys)
    ret = []
    keys.each{ |key| ret << map[key] }
    ret.flatten!
    ret.uniq!
    ret
  end

  def create_map
    ret = Hash.new{ |h, k| h[k] = [] }
    @roots.each do |root|
      root = File.expand_path(root)
      next unless File.directory?(root)
      Dir.glob(root + '/*') do |file_name|
        next unless File.directory?(file_name)
        name = normalized(File.basename(file_name))
        ret[name] << file_name
      end
    end
    ret
  end
end
