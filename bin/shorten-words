#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

$stdout.sync = true
trap(2) { exit(138) }
opt_list = opt_sort = opt_word = nil
def me = File.basename(Process.argv0)

ARGV.each do |arg|
  case arg
  when '-v', '--version'
    puts("#{me} v0.3.5")
    exit
  when '-h', '--help'
    puts(<<~HELP)
      Usage: #{me} [<options> | <abbrev> | --help | --version]

      Without further arguments, a word list is read in from $stdin and all words
      and their abbreviations are printed.

      Options:
        -l, --list      Print as list.
        -s, --sort      Print as sorted list.

      If an <abbrev> is given, a word list is read in from $stdin and the word
      matching the given <abbrev> is printed. When no match was found the program
      terminates with errorcode 1.

      Other commands:
        -v, --version   Print just version information.
        -h, --help      Print this help text.
    HELP
    exit
  when '-l', '--list'
    opt_list = true
  when '-s', '--sort', '-ls', '-sl'
    opt_list = opt_sort = true
  else
    opt_word = arg
  end
end

catalog = Hash.new { |h, k| h[k] = {}.compare_by_identity }
def abbrev(word) = Array.new(word.size) { word[..it] }
def combine(left, right) = left.map { |l| right.map { |r| l + r } }.flatten(1)

def add(catalog, word)
  parts = word.split('-').delete_if(&:empty?)
  candidates = abbrev(parts.shift)
  candidates = combine(candidates, abbrev(parts.shift)) until parts.empty?
  candidates.each { |abbrev| catalog[abbrev][word] = word }
  catalog[word][word] = word if word.include?('-')
  nil
end

$stdin.each_line(chomp: true) do |line|
  line.split.map!(&:strip).each { |word| add(catalog, word) unless word.empty? }
end

def each_pair(catalog)
  until catalog.empty?
    catalog
      .keys
      .sort! { |a, b| (r = a.size <=> b.size) == 0 ? a <=> b : r }
      .each do |abbrev|
        found = catalog[abbrev]
        next if found.size > 1
        catalog.delete(abbrev)
        next if found.empty?
        word = found.first[0]
        catalog.each_value { |ary| ary.delete(word) }
        yield(abbrev, word)
      end
  end
end

if opt_word
  each_pair(catalog) do |abbrev, word|
    next if opt_word != abbrev
    puts(word)
    exit
  end
  exit(1)
end

func = opt_list ? proc { |a, w| puts("#{a}:#{w}") } : proc { |*a| puts(*a) }

if opt_sort
  to_enum(:each_pair, catalog).sort_by(&:first).each(&func)
else
  each_pair(catalog, &func)
end
