#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

trap(2) { exit(138) }

WIDTH = [ENV['WIDTH'].to_i, 20].max

def chr(code) = code.chr(Encoding::UTF_8)
def str(*codes) = codes.map { chr(_1) }.join.freeze
def mod(base) = str(0x200D, base, 0xFE0F)
def colored(base) = rand < 0.5 ? base : base + COLORS.sample
def gendered(base) = rand < 0.5 ? base : base + GENDER_MODS.sample
def align(base) = rand < 0.5 ? base : base + TO_RIGHT

MW = %w[👨 👩].freeze
GENDERS = (MW + %w[🧑]).freeze
GENDER_PAIRS = %w[👫 👭 👬].freeze
VEHICLES = %w[🚌 🚎 🚐 🚋].freeze
COLORS = [
  chr(0x1F3FB),
  chr(0x1F3FC),
  chr(0x1F3FD),
  chr(0x1F3FE),
  chr(0x1F3Ff)
].freeze
GENDER_MODS = [mod(0x2640), mod(0x2642)].freeze
WHEEL_CHAIR_MODS = [str(0x200D, 0x1F9BD), str(0x200D, 0x1F9BC)].freeze
WHITE_CANE = str(0x200D, 0x1F9AF)
TO_RIGHT = mod(0x27A1)
PAIR_JOIN = str(0x200d, 0x1f91d, 0x200d)

def weighted(**definitions)
  definitions = definitions.flat_map { |k, c| Array.new(c, k) }
  Enumerator.new { _1 << definitions.sample.call while true }
end

puts(
  "🚏#{
    weighted(
      -> { "\u3000" } => 75,
      -> { gendered(colored('🧍')) } => 20,
      lambda do # pair
        next colored(GENDER_PAIRS.sample) if rand < 0.1
        "#{MW.sample}#{COLORS.sample}#{PAIR_JOIN}#{MW.sample}#{COLORS.sample}"
      end =>
        15,
      -> { align(gendered(colored('🚶'))) } => 10,
      -> { align(gendered(colored('🏃'))) } => 10,
      -> { align(colored(GENDERS.sample) + WHITE_CANE) } => 4,
      -> { align(colored(GENDERS.sample) + WHEEL_CHAIR_MODS.sample) } => 4,
      -> { VEHICLES.sample } => 2
    ).take(WIDTH - 1).join
  }"
)
