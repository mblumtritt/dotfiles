#!/usr/bin/env ruby --disable-all
# frozen_string_literal: true

trap(2) { exit(138) }
def version = (puts("#{me} v0.1.0") or exit)
def me = File.basename(Process.argv0)
def help = (puts <<~HELP or exit)
  Usage: #{me} [<filter>] <dir name>

  Select a file from given directory.

  Options:
    -i, --interactive   interactive select (using fzf)
    -s, --short         print short file name
    -h, --help          print this help
    -v, --version       print version information

  Filters:
  #{Filters.help}
HELP

module Filters
  def self.find(name) = map[name]&.first&.to_proc

  def self.help
    { '-m, --match <str>' => 'name matching <str>' }.merge!(
      map
        .transform_values(&:last)
        .group_by(&:last)
        .transform_values! { _1.map!(&:first).sort_by(&:size).join(', ') }
        .invert
    )
      .map { |k, v| "  #{k.ljust(22)}  #{v}" }
      .join("\n")
  end

  def self.map
    @map and return @map
    @map = {
      '--file' => [:file?, 'is a file'],
      '--directory' => [:directory?, 'is a directory'],
      '--blockdev' => [:blockdev?, 'is a block device'],
      '--chardev' => [:chardev?, 'is a char device'],
      '--pipe' => [:pipe?, 'is a pipe'],
      '--socket' => [:socket?, 'is a socket'],
      '--symlink' => [:symlink?, 'is a symlink'],
      '--executable' => [:executable_real?, 'is executable'],
      '--readable' => [:readable_real?, 'is readable by user'],
      '--writable' => [:writable_real?, 'is writable by user'],
      '--zero' => [:zero?, 'is a zero-length file'],
      '--size' => [:size?, 'is not a zero-length file'],
      '--owned' => [:owned?, 'the user owns the file'],
      '--grpowned' => [:grpowned?, 'the user`s group owns the file'],
      '--world-readable' => [:world_readable?, 'is readable by others'],
      '--world-writable' => [:world_writable?, 'is writable by others']
      # '--sticky' => [:sticky?, 'the sticky bit is set']
    }
    {
      '-f' => '--file',
      '--dir' => '--directory',
      '-d' => '--directory',
      '-b' => '--blockdev',
      '-c' => '--chardev',
      '-p' => '--pipe',
      '-t' => '--socket',
      '-l' => '--symlink',
      '-e' => '--executable',
      '-x' => '--executable',
      '-r' => '--readable',
      '-w' => '--writable',
      '-0' => '--zero',
      '-!' => '--size',
      '-o' => '--owned',
      '-g' => '--grpowned'
    }.each_pair { |s, k| @map[s] = @map[k] or raise }
    @map
  end
end

module Opts
  class << self
    attr_reader :files, :filters
    attr_accessor :match, :short, :interactive

    def result
      add('./') if @added.zero?
      return if @files.empty?
      unless @filters.empty?
        @files.keep_if { |_, stat| @filters.all? { _1[stat] } }
      end
      return if @files.empty?
      @files.to_h { |fname, _| [File.basename(fname, '.*'), fname] }
    end

    def add(dir_name)
      @added += 1
      @files +=
        Dir
          .glob(File.expand_path("#{dir_name}/*"), sort: false)
          .filter_map { stat = stat(_1) and [_1, stat] }
    end

    private

    def stat(fname)
      File.stat(fname)
    rescue SystemCallError
      nil
    end
  end

  @added = 0
  @files = []
  @filters = []
end

until ARGV.empty?
  case (arg = ARGV.shift)
  when '-h', '--help'
    help
  when '-v', '--version'
    version
  when '-m', '--match'
    Opts.match = ARGV.shift
  when '-i', '--interactive'
    Opts.interactive = true
  when '-s', '--short'
    Opts.short = true
  else
    next Opts.add(arg) unless arg[0] == '-'
    filter = Filters.find(arg) and next Opts.filters << filter
    $stderr.puts("#{me}: invalid filter - #{arg.inspect}")
    exit(2)
  end
end

map = Opts.result or exit(1)

puts(Opts.short ? map.keys : map.values) or exit unless Opts.interactive

fzf = "fzf --prompt 'Find Command: ' --info=inline --highlight-line"
fzf += " -1 -0 --query '#{Opts.match}'" if Opts.match

IO.pipe do |in_read, in_write|
  IO.popen(fzf, in: in_read, err: %i[child out]) do |stream|
    in_write.puts(map.keys)
    in_write.close
    cmd = stream.readline(chomp: true)
    puts(Opts.short ? cmd : map[cmd])
  rescue EOFError
    exit(1)
  end
end
