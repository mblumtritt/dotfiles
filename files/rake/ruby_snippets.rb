# frozen_string_literal: true

RUBY_SNIPPETS = {
  # word expansions
  '.co' => ['.compare_by_identity'],
  '.em?' => ['.empty?'],
  '.fr' => ['.freeze'],
  '.n?' => ['.nil?'],
  '.ne?' => ['.negative?'],
  '.po?' => ['.positive?'],
  '.rev' => ['.reverse'],
  '.z?' => ['.zero?'],
  'aa' => ['attr_accessor'],
  'ar' => ['attr_reader'],
  'aw' => ['attr_writer'],
  'eli' => ['elsif'],
  'els' => ['else'],
  'ext' => ['extend'],
  'inc' => ['include'],
  'pc' => ['private_constant'],
  'pm' => ['private_class_method'],
  'whe' => ['when'],
  # simple blocks
  'cas' => ['case', :block],
  'cla' => ['class', :block],
  'def' => ['def', :block],
  'if' => ['if', :block],
  'mod' => ['module', :block],
  'unl' => ['unless', :block],
  'unt' => ['until', :block],
  'whi' => ['while', :block],
  # function calls
  '.del' => ['delete', :func],
  '.dela' => ['delete_at', :func],
  '.delp!' => ['delete_prefix!', :func],
  '.delp' => ['delete_prefix', :func],
  '.dels!' => ['delete_suffix!', :func],
  '.dels' => ['delete_suffix', :func],
  '.di' => ['dig', :func],
  '.en?' => ['end_width?', :func],
  '.fi' => ['find', :func],
  '.i?' => ['include?', :func],
  '.sl' => ['slice', :func],
  '.st?' => ['start_width?', :func],
  # function blocks
  '.deli' => ['delete_if', :bfunc],
  '.ea' => ['each', :bfunc],
  '.eab' => ['each_byte', :bfunc],
  '.eac' => ['each_char', :bfunc],
  '.each' => ['each_child', :bfunc],
  '.eaco' => ['each_code_point', :bfunc],
  '.eak' => ['each_key', :bfunc],
  '.eas' => ['each_slice', :bfunc],
  '.eav' => ['each_value', :bfunc],
  '.fia' => ['find_all', :bfunc],
  '.fii' => ['find_index', :bfunc],
  '.fil' => ['filter_map', :bfunc],
  '.gro' => ['group_by', :bfunc],
  '.ke' => ['keep_if', :bfunc],
  '.ma!' => ['map!', :bfunc],
  '.ma' => ['map', :bfunc],
  '.mer!' => ['merge!', :bfunc],
  '.mer' => ['merge', :bfunc],
  '.rea' => ['reverse_each', :bfunc],
  '.trak!' => ['transform_keys!', :bfunc],
  '.trak' => ['transform_keys', :bfunc],
  '.trav!' => ['transform_values!', :bfunc],
  '.trav' => ['transform_values', :bfunc],
  # magic comments
  '#r' => ['#shebang', ['#!/usr/bin/env ruby', '$0']],
  '#f' => ['frozen_string_literal', ['# frozen_string_literal: true', '$0']],
  '#rc' => ['rubocop', '# rubocop: ${1|disable,enable|} $0'],
  # other
  '.eai' => ['.each_index block', '.each_index { |${1:idx}| $0 }'],
  '.eal' => ['.each_line block', '.each_line(chomp: true) { |${1:line}| $0 }'],
  '.eap' => ['.each_pair block', '.each_pair { |${1:key}, ${2:value}| $0 }'],
  '.eawi' => [
    '.each_with_index block',
    '.each_with_index { |${1:item}, ${2:idx}| $0 }'
  ],
  '.glob' => [
    '.glob',
    ['.glob("${1:pattern}"${2:, sort: true}) do |fname|', "\t$0", 'end']
  ],
  '.eawo' => ['.each_with_object block', '.each_with_object($1) { $0 }'],
  'aft' => ['after block ', 'after { $0 }'],
  'bef' => ['before block ', 'before { $0 }'],
  'clas' => ['self class block', ['class << self', "\t$0", 'end']],
  'defi' => ['def initialize', ['def initialize$0', 'end']],
  'defs' => ['def self', ['def self.$0', 'end']],
  'do' => ['do block', 'do { |${1:item}| $0 }'],
  'endf' => ['EOF', %w[__END__ $0]],
  'ens' => ['ensure block', ['ensure', "\t$0"]],
  'enum' => ['return to_enum', 'return to_enum(__method__,$1) $0'],
  'req' => ['require', "require '$0'"],
  'res' => ['rescue block', ['rescue ${1:StandardException} => e', "\t$0"]],
  'rr' => ['require_relative', "require_relative '$0'"]
}.freeze
